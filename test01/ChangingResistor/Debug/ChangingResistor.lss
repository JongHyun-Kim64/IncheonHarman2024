
ChangingResistor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000002e4  00000378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800110  00800110  00000388  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b78  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009d9  00000000  00000000  00000fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004b1  00000000  00000000  000019a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e8  00000000  00000000  00001e58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000045c  00000000  00000000  00001f40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003d3  00000000  00000000  0000239c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  0000276f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 ee       	ldi	r30, 0xE4	; 228
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e1       	ldi	r26, 0x10	; 16
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 31       	cpi	r26, 0x15	; 21
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	1b d0       	rcall	.+54     	; 0xfa <main>
  c4:	0d c1       	rjmp	.+538    	; 0x2e0 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <ADC_init>:
#include "UART1.h"
#include "myHeader.h"

void ADC_init(unsigned char channel)
{
	ADMUX |= (1 << REFS0); 		// AVCC를 기준 전압으로 선택
  c8:	97 b1       	in	r25, 0x07	; 7
  ca:	90 64       	ori	r25, 0x40	; 64
  cc:	97 b9       	out	0x07, r25	; 7
	
	ADCSRA |= 0x07;			// 분주비 설정
  ce:	96 b1       	in	r25, 0x06	; 6
  d0:	97 60       	ori	r25, 0x07	; 7
  d2:	96 b9       	out	0x06, r25	; 6
	ADCSRA |= (1 << ADEN);		// ADC 활성화
  d4:	96 b1       	in	r25, 0x06	; 6
  d6:	90 68       	ori	r25, 0x80	; 128
  d8:	96 b9       	out	0x06, r25	; 6
	ADCSRA |= (1 << ADFR);		// 프리 러닝 모드
  da:	96 b1       	in	r25, 0x06	; 6
  dc:	90 62       	ori	r25, 0x20	; 32
  de:	96 b9       	out	0x06, r25	; 6

	ADMUX = ((ADMUX & 0xE0) | channel);	// 채널 선택
  e0:	97 b1       	in	r25, 0x07	; 7
  e2:	90 7e       	andi	r25, 0xE0	; 224
  e4:	89 2b       	or	r24, r25
  e6:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADSC);		// 변환 시작
  e8:	86 b1       	in	r24, 0x06	; 6
  ea:	80 64       	ori	r24, 0x40	; 64
  ec:	86 b9       	out	0x06, r24	; 6
  ee:	08 95       	ret

000000f0 <read_ADC>:
}

int read_ADC(void)
{
	while(!(ADCSRA & (1 << ADIF)));	// 변환 종료 대기
  f0:	34 9b       	sbis	0x06, 4	; 6
  f2:	fe cf       	rjmp	.-4      	; 0xf0 <read_ADC>
	
	return ADC;				// 10비트 값을 반환
  f4:	84 b1       	in	r24, 0x04	; 4
  f6:	95 b1       	in	r25, 0x05	; 5
}
  f8:	08 95       	ret

000000fa <main>:

int main(void)
{
	int read;

	ADC_init(0);				// AD 변환기 초기화
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	e5 df       	rcall	.-54     	; 0xc8 <ADC_init>
	
	while(1)
	{
		read = read_ADC();			// 가변저항 값 읽기
  fe:	f8 df       	rcall	.-16     	; 0xf0 <read_ADC>
 100:	bc 01       	movw	r22, r24

		Display(read);
 102:	99 0f       	add	r25, r25
 104:	88 0b       	sbc	r24, r24
 106:	99 0b       	sbc	r25, r25
 108:	3b d0       	rcall	.+118    	; 0x180 <Display>
 10a:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10c:	83 ed       	ldi	r24, 0xD3	; 211
 10e:	90 e3       	ldi	r25, 0x30	; 48
 110:	21 50       	subi	r18, 0x01	; 1
 112:	80 40       	sbci	r24, 0x00	; 0
 114:	90 40       	sbci	r25, 0x00	; 0
 116:	e1 f7       	brne	.-8      	; 0x110 <main+0x16>
 118:	00 c0       	rjmp	.+0      	; 0x11a <main+0x20>
 11a:	00 00       	nop
 11c:	f0 cf       	rjmp	.-32     	; 0xfe <main+0x4>

0000011e <seg>:
 11e:	25 b3       	in	r18, 0x15	; 21
uint8_t digit[] = {	0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x27, 0x7F, 0x67, 0x77, 0x7c, 0x58, 0x5e, 0x79, 0x71 };
char arr[5];		//세그먼트 이미지 정보를 담을 안전공간


void seg(int sel, uint8_t c){
	PORTC |= 0X0F;
 120:	2f 60       	ori	r18, 0x0F	; 15
 122:	25 bb       	out	0x15, r18	; 21
	PORTC &= ~(1 << (3-sel));
 124:	25 b3       	in	r18, 0x15	; 21
 126:	43 e0       	ldi	r20, 0x03	; 3
 128:	50 e0       	ldi	r21, 0x00	; 0
 12a:	48 1b       	sub	r20, r24
 12c:	59 0b       	sbc	r21, r25
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	02 c0       	rjmp	.+4      	; 0x138 <seg+0x1a>
 134:	88 0f       	add	r24, r24
 136:	99 1f       	adc	r25, r25
 138:	4a 95       	dec	r20
 13a:	e2 f7       	brpl	.-8      	; 0x134 <seg+0x16>
 13c:	80 95       	com	r24
 13e:	82 23       	and	r24, r18
 140:	85 bb       	out	0x15, r24	; 21
	PORTD = c;	//숫자 데이터 출력
 142:	62 bb       	out	0x12, r22	; 18
 144:	8f e3       	ldi	r24, 0x3F	; 63
 146:	9f e1       	ldi	r25, 0x1F	; 31
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <seg+0x2a>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <seg+0x30>
 14e:	00 00       	nop
 150:	08 95       	ret

00000152 <FND_4>:
	_delay_ms(2);
}


void FND_4(char *inf){	//segment Image 배열
 152:	0f 93       	push	r16
 154:	1f 93       	push	r17
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
 15a:	8c 01       	movw	r16, r24
	for (int i = 0; i < 4; i++){
 15c:	c0 e0       	ldi	r28, 0x00	; 0
 15e:	d0 e0       	ldi	r29, 0x00	; 0
 160:	07 c0       	rjmp	.+14     	; 0x170 <FND_4+0x1e>
		seg(i, *(inf+i));
 162:	f8 01       	movw	r30, r16
 164:	ec 0f       	add	r30, r28
 166:	fd 1f       	adc	r31, r29
 168:	60 81       	ld	r22, Z
 16a:	ce 01       	movw	r24, r28
 16c:	d8 df       	rcall	.-80     	; 0x11e <seg>
	_delay_ms(2);
}


void FND_4(char *inf){	//segment Image 배열
	for (int i = 0; i < 4; i++){
 16e:	21 96       	adiw	r28, 0x01	; 1
 170:	c4 30       	cpi	r28, 0x04	; 4
 172:	d1 05       	cpc	r29, r1
 174:	b4 f3       	brlt	.-20     	; 0x162 <FND_4+0x10>
		seg(i, *(inf+i));

	}
}
 176:	df 91       	pop	r29
 178:	cf 91       	pop	r28
 17a:	1f 91       	pop	r17
 17c:	0f 91       	pop	r16
 17e:	08 95       	ret

00000180 <Display>:

//16진수 segment image 배열
char* Display(unsigned long num){	//10진 정수를 입력받아 16진수 문자열로 변환 ex)65535 ==> 0xffff, 56506=>0xBCDA
 180:	4f 92       	push	r4
 182:	5f 92       	push	r5
 184:	6f 92       	push	r6
 186:	7f 92       	push	r7
 188:	8f 92       	push	r8
 18a:	9f 92       	push	r9
 18c:	af 92       	push	r10
 18e:	bf 92       	push	r11
 190:	cf 92       	push	r12
 192:	df 92       	push	r13
 194:	ef 92       	push	r14
 196:	ff 92       	push	r15
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
 19c:	00 d0       	rcall	.+0      	; 0x19e <Display+0x1e>
 19e:	00 d0       	rcall	.+0      	; 0x1a0 <Display+0x20>
 1a0:	cd b7       	in	r28, 0x3d	; 61
 1a2:	de b7       	in	r29, 0x3e	; 62
 1a4:	6b 01       	movw	r12, r22
 1a6:	7c 01       	movw	r14, r24
	int n1 = num % 10;			//A(10): 문자가 아닌 숫자
 1a8:	0f 2e       	mov	r0, r31
 1aa:	fa e0       	ldi	r31, 0x0A	; 10
 1ac:	8f 2e       	mov	r8, r31
 1ae:	91 2c       	mov	r9, r1
 1b0:	a1 2c       	mov	r10, r1
 1b2:	b1 2c       	mov	r11, r1
 1b4:	f0 2d       	mov	r31, r0
 1b6:	a5 01       	movw	r20, r10
 1b8:	94 01       	movw	r18, r8
 1ba:	70 d0       	rcall	.+224    	; 0x29c <__udivmodsi4>
 1bc:	69 83       	std	Y+1, r22	; 0x01
 1be:	7a 83       	std	Y+2, r23	; 0x02
 1c0:	8b 83       	std	Y+3, r24	; 0x03
 1c2:	9c 83       	std	Y+4, r25	; 0x04
	int n2 = (num / 10) % 10;	//B(11)
 1c4:	ca 01       	movw	r24, r20
 1c6:	b9 01       	movw	r22, r18
 1c8:	a5 01       	movw	r20, r10
 1ca:	94 01       	movw	r18, r8
 1cc:	67 d0       	rcall	.+206    	; 0x29c <__udivmodsi4>
 1ce:	2b 01       	movw	r4, r22
 1d0:	3c 01       	movw	r6, r24
	int n3 = (num / 100) % 10;	//C(12)
 1d2:	c7 01       	movw	r24, r14
 1d4:	b6 01       	movw	r22, r12
 1d6:	24 e6       	ldi	r18, 0x64	; 100
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	40 e0       	ldi	r20, 0x00	; 0
 1dc:	50 e0       	ldi	r21, 0x00	; 0
 1de:	5e d0       	rcall	.+188    	; 0x29c <__udivmodsi4>
 1e0:	ca 01       	movw	r24, r20
 1e2:	b9 01       	movw	r22, r18
 1e4:	a5 01       	movw	r20, r10
 1e6:	94 01       	movw	r18, r8
 1e8:	59 d0       	rcall	.+178    	; 0x29c <__udivmodsi4>
 1ea:	4b 01       	movw	r8, r22
 1ec:	5c 01       	movw	r10, r24
	int n4 = num / 1000;		//D(13)
 1ee:	c7 01       	movw	r24, r14
 1f0:	b6 01       	movw	r22, r12
 1f2:	28 ee       	ldi	r18, 0xE8	; 232
 1f4:	33 e0       	ldi	r19, 0x03	; 3
 1f6:	40 e0       	ldi	r20, 0x00	; 0
 1f8:	50 e0       	ldi	r21, 0x00	; 0
 1fa:	50 d0       	rcall	.+160    	; 0x29c <__udivmodsi4>
	
	arr[0] = digit[n1]; arr[1] = digit[n2]; arr[2] = digit[n3] + 0x80; arr[3] = digit[n4];
 1fc:	e9 81       	ldd	r30, Y+1	; 0x01
 1fe:	fa 81       	ldd	r31, Y+2	; 0x02
 200:	e0 50       	subi	r30, 0x00	; 0
 202:	ff 4f       	sbci	r31, 0xFF	; 255
 204:	80 81       	ld	r24, Z
 206:	e0 e1       	ldi	r30, 0x10	; 16
 208:	f1 e0       	ldi	r31, 0x01	; 1
 20a:	80 83       	st	Z, r24
 20c:	d2 01       	movw	r26, r4
 20e:	a0 50       	subi	r26, 0x00	; 0
 210:	bf 4f       	sbci	r27, 0xFF	; 255
 212:	8c 91       	ld	r24, X
 214:	81 83       	std	Z+1, r24	; 0x01
 216:	d4 01       	movw	r26, r8
 218:	a0 50       	subi	r26, 0x00	; 0
 21a:	bf 4f       	sbci	r27, 0xFF	; 255
 21c:	8c 91       	ld	r24, X
 21e:	80 58       	subi	r24, 0x80	; 128
 220:	82 83       	std	Z+2, r24	; 0x02
 222:	d9 01       	movw	r26, r18
 224:	a0 50       	subi	r26, 0x00	; 0
 226:	bf 4f       	sbci	r27, 0xFF	; 255
 228:	8c 91       	ld	r24, X
 22a:	83 83       	std	Z+3, r24	; 0x03
	
	if ( num< 10 ){
 22c:	8a e0       	ldi	r24, 0x0A	; 10
 22e:	c8 16       	cp	r12, r24
 230:	d1 04       	cpc	r13, r1
 232:	e1 04       	cpc	r14, r1
 234:	f1 04       	cpc	r15, r1
 236:	28 f4       	brcc	.+10     	; 0x242 <Display+0xc2>
		arr[3] = 0; arr[1] = 0; arr[2] = 0x80;
 238:	13 82       	std	Z+3, r1	; 0x03
 23a:	11 82       	std	Z+1, r1	; 0x01
 23c:	80 e8       	ldi	r24, 0x80	; 128
 23e:	82 83       	std	Z+2, r24	; 0x02
 240:	15 c0       	rjmp	.+42     	; 0x26c <Display+0xec>
	}
	else if ( num<100 ){
 242:	84 e6       	ldi	r24, 0x64	; 100
 244:	c8 16       	cp	r12, r24
 246:	d1 04       	cpc	r13, r1
 248:	e1 04       	cpc	r14, r1
 24a:	f1 04       	cpc	r15, r1
 24c:	30 f4       	brcc	.+12     	; 0x25a <Display+0xda>
		arr[2] = 0x80; arr[3] = 0;
 24e:	e0 e1       	ldi	r30, 0x10	; 16
 250:	f1 e0       	ldi	r31, 0x01	; 1
 252:	80 e8       	ldi	r24, 0x80	; 128
 254:	82 83       	std	Z+2, r24	; 0x02
 256:	13 82       	std	Z+3, r1	; 0x03
 258:	09 c0       	rjmp	.+18     	; 0x26c <Display+0xec>
	}
	else if ( num<1000 ){
 25a:	88 ee       	ldi	r24, 0xE8	; 232
 25c:	c8 16       	cp	r12, r24
 25e:	83 e0       	ldi	r24, 0x03	; 3
 260:	d8 06       	cpc	r13, r24
 262:	e1 04       	cpc	r14, r1
 264:	f1 04       	cpc	r15, r1
		arr[3] = 0;
 266:	10 f4       	brcc	.+4      	; 0x26c <Display+0xec>
 268:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <__data_end+0x3>
	}
	
	FND_4(arr);
 26c:	80 e1       	ldi	r24, 0x10	; 16
 26e:	91 e0       	ldi	r25, 0x01	; 1
 270:	70 df       	rcall	.-288    	; 0x152 <FND_4>
	return arr;
}
 272:	80 e1       	ldi	r24, 0x10	; 16
 274:	91 e0       	ldi	r25, 0x01	; 1
 276:	0f 90       	pop	r0
 278:	0f 90       	pop	r0
 27a:	0f 90       	pop	r0
 27c:	0f 90       	pop	r0
 27e:	df 91       	pop	r29
 280:	cf 91       	pop	r28
 282:	ff 90       	pop	r15
 284:	ef 90       	pop	r14
 286:	df 90       	pop	r13
 288:	cf 90       	pop	r12
 28a:	bf 90       	pop	r11
 28c:	af 90       	pop	r10
 28e:	9f 90       	pop	r9
 290:	8f 90       	pop	r8
 292:	7f 90       	pop	r7
 294:	6f 90       	pop	r6
 296:	5f 90       	pop	r5
 298:	4f 90       	pop	r4
 29a:	08 95       	ret

0000029c <__udivmodsi4>:
 29c:	a1 e2       	ldi	r26, 0x21	; 33
 29e:	1a 2e       	mov	r1, r26
 2a0:	aa 1b       	sub	r26, r26
 2a2:	bb 1b       	sub	r27, r27
 2a4:	fd 01       	movw	r30, r26
 2a6:	0d c0       	rjmp	.+26     	; 0x2c2 <__udivmodsi4_ep>

000002a8 <__udivmodsi4_loop>:
 2a8:	aa 1f       	adc	r26, r26
 2aa:	bb 1f       	adc	r27, r27
 2ac:	ee 1f       	adc	r30, r30
 2ae:	ff 1f       	adc	r31, r31
 2b0:	a2 17       	cp	r26, r18
 2b2:	b3 07       	cpc	r27, r19
 2b4:	e4 07       	cpc	r30, r20
 2b6:	f5 07       	cpc	r31, r21
 2b8:	20 f0       	brcs	.+8      	; 0x2c2 <__udivmodsi4_ep>
 2ba:	a2 1b       	sub	r26, r18
 2bc:	b3 0b       	sbc	r27, r19
 2be:	e4 0b       	sbc	r30, r20
 2c0:	f5 0b       	sbc	r31, r21

000002c2 <__udivmodsi4_ep>:
 2c2:	66 1f       	adc	r22, r22
 2c4:	77 1f       	adc	r23, r23
 2c6:	88 1f       	adc	r24, r24
 2c8:	99 1f       	adc	r25, r25
 2ca:	1a 94       	dec	r1
 2cc:	69 f7       	brne	.-38     	; 0x2a8 <__udivmodsi4_loop>
 2ce:	60 95       	com	r22
 2d0:	70 95       	com	r23
 2d2:	80 95       	com	r24
 2d4:	90 95       	com	r25
 2d6:	9b 01       	movw	r18, r22
 2d8:	ac 01       	movw	r20, r24
 2da:	bd 01       	movw	r22, r26
 2dc:	cf 01       	movw	r24, r30
 2de:	08 95       	ret

000002e0 <_exit>:
 2e0:	f8 94       	cli

000002e2 <__stop_program>:
 2e2:	ff cf       	rjmp	.-2      	; 0x2e2 <__stop_program>
