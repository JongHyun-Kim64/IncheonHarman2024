
test02-7seg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000003b8  0000044c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800112  00800112  0000045e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000045e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000490  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000004cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000dc8  00000000  00000000  00000514  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000964  00000000  00000000  000012dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000474  00000000  00000000  00001c40  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d4  00000000  00000000  000020b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000452  00000000  00000000  00002188  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006f5  00000000  00000000  000025da  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00002ccf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 eb       	ldi	r30, 0xB8	; 184
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e1       	ldi	r26, 0x12	; 18
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a7 31       	cpi	r26, 0x17	; 23
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	d5 d0       	rcall	.+426    	; 0x26e <main>
  c4:	77 c1       	rjmp	.+750    	; 0x3b4 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <display_character.1765>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	25 b3       	in	r18, 0x15	; 21
  ca:	2f 60       	ori	r18, 0x0F	; 15
  cc:	25 bb       	out	0x15, r18	; 21
  ce:	45 b3       	in	r20, 0x15	; 21
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	21 e0       	ldi	r18, 0x01	; 1
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	f9 01       	movw	r30, r18
  d8:	02 c0       	rjmp	.+4      	; 0xde <display_character.1765+0x16>
  da:	ee 0f       	add	r30, r30
  dc:	ff 1f       	adc	r31, r31
  de:	8a 95       	dec	r24
  e0:	e2 f7       	brpl	.-8      	; 0xda <display_character.1765+0x12>
  e2:	cf 01       	movw	r24, r30
  e4:	80 95       	com	r24
  e6:	84 23       	and	r24, r20
  e8:	85 bb       	out	0x15, r24	; 21
  ea:	fb 01       	movw	r30, r22
  ec:	e0 50       	subi	r30, 0x00	; 0
  ee:	ff 4f       	sbci	r31, 0xFF	; 255
  f0:	80 81       	ld	r24, Z
  f2:	82 bb       	out	0x12, r24	; 18
  f4:	08 95       	ret

000000f6 <seg>:
	*p &= ~b;
	_delay_ms(500);
}

void seg(int sel, uint8_t c){
	PORTC |= 0X0F;
  f6:	25 b3       	in	r18, 0x15	; 21
  f8:	2f 60       	ori	r18, 0x0F	; 15
  fa:	25 bb       	out	0x15, r18	; 21
	PORTC &= ~(1 << (3-sel));
  fc:	25 b3       	in	r18, 0x15	; 21
  fe:	43 e0       	ldi	r20, 0x03	; 3
 100:	50 e0       	ldi	r21, 0x00	; 0
 102:	48 1b       	sub	r20, r24
 104:	59 0b       	sbc	r21, r25
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	02 c0       	rjmp	.+4      	; 0x110 <seg+0x1a>
 10c:	88 0f       	add	r24, r24
 10e:	99 1f       	adc	r25, r25
 110:	4a 95       	dec	r20
 112:	e2 f7       	brpl	.-8      	; 0x10c <seg+0x16>
 114:	80 95       	com	r24
 116:	82 23       	and	r24, r18
 118:	85 bb       	out	0x15, r24	; 21
	PORTD = c;	//숫자 데이터 출력
 11a:	62 bb       	out	0x12, r22	; 18
 11c:	8f e3       	ldi	r24, 0x3F	; 63
 11e:	9f e1       	ldi	r25, 0x1F	; 31
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <seg+0x2a>
 124:	00 c0       	rjmp	.+0      	; 0x126 <seg+0x30>
 126:	00 00       	nop
 128:	08 95       	ret

0000012a <FND_4>:
	_delay_ms(2);
}


void FND_4(char *inf){	//segment Image 배열
 12a:	0f 93       	push	r16
 12c:	1f 93       	push	r17
 12e:	cf 93       	push	r28
 130:	df 93       	push	r29
 132:	8c 01       	movw	r16, r24
	for (int i = 0; i < 4; i++){
 134:	c0 e0       	ldi	r28, 0x00	; 0
 136:	d0 e0       	ldi	r29, 0x00	; 0
 138:	07 c0       	rjmp	.+14     	; 0x148 <FND_4+0x1e>
		seg(i, *(inf+i));
 13a:	f8 01       	movw	r30, r16
 13c:	ec 0f       	add	r30, r28
 13e:	fd 1f       	adc	r31, r29
 140:	60 81       	ld	r22, Z
 142:	ce 01       	movw	r24, r28
 144:	d8 df       	rcall	.-80     	; 0xf6 <seg>
	_delay_ms(2);
}


void FND_4(char *inf){	//segment Image 배열
	for (int i = 0; i < 4; i++){
 146:	21 96       	adiw	r28, 0x01	; 1
 148:	c4 30       	cpi	r28, 0x04	; 4
 14a:	d1 05       	cpc	r29, r1
 14c:	b4 f3       	brlt	.-20     	; 0x13a <FND_4+0x10>
		seg(i, *(inf+i));
	}
}
 14e:	df 91       	pop	r29
 150:	cf 91       	pop	r28
 152:	1f 91       	pop	r17
 154:	0f 91       	pop	r16
 156:	08 95       	ret

00000158 <Trans>:

//16진수 segment image 배열
char* Trans(unsigned long num){	//10진 정수를 입력받아 16진수 문자열로 변환 ex)65535 ==> 0xffff, 56506=>0xBCDA
 158:	4f 92       	push	r4
 15a:	5f 92       	push	r5
 15c:	6f 92       	push	r6
 15e:	7f 92       	push	r7
 160:	8f 92       	push	r8
 162:	9f 92       	push	r9
 164:	af 92       	push	r10
 166:	bf 92       	push	r11
 168:	cf 92       	push	r12
 16a:	df 92       	push	r13
 16c:	ef 92       	push	r14
 16e:	ff 92       	push	r15
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
 174:	00 d0       	rcall	.+0      	; 0x176 <Trans+0x1e>
 176:	00 d0       	rcall	.+0      	; 0x178 <Trans+0x20>
 178:	cd b7       	in	r28, 0x3d	; 61
 17a:	de b7       	in	r29, 0x3e	; 62
 17c:	6b 01       	movw	r12, r22
 17e:	7c 01       	movw	r14, r24
	int n1 = num % 10;			//A(10): 문자가 아닌 숫자
 180:	0f 2e       	mov	r0, r31
 182:	fa e0       	ldi	r31, 0x0A	; 10
 184:	8f 2e       	mov	r8, r31
 186:	91 2c       	mov	r9, r1
 188:	a1 2c       	mov	r10, r1
 18a:	b1 2c       	mov	r11, r1
 18c:	f0 2d       	mov	r31, r0
 18e:	a5 01       	movw	r20, r10
 190:	94 01       	movw	r18, r8
 192:	ee d0       	rcall	.+476    	; 0x370 <__udivmodsi4>
 194:	69 83       	std	Y+1, r22	; 0x01
 196:	7a 83       	std	Y+2, r23	; 0x02
 198:	8b 83       	std	Y+3, r24	; 0x03
 19a:	9c 83       	std	Y+4, r25	; 0x04
	int n2 = (num / 10) % 10;	//B(11)
 19c:	ca 01       	movw	r24, r20
 19e:	b9 01       	movw	r22, r18
 1a0:	a5 01       	movw	r20, r10
 1a2:	94 01       	movw	r18, r8
 1a4:	e5 d0       	rcall	.+458    	; 0x370 <__udivmodsi4>
 1a6:	2b 01       	movw	r4, r22
 1a8:	3c 01       	movw	r6, r24
	int n3 = (num / 100) % 10;	//C(12)
 1aa:	c7 01       	movw	r24, r14
 1ac:	b6 01       	movw	r22, r12
 1ae:	24 e6       	ldi	r18, 0x64	; 100
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	40 e0       	ldi	r20, 0x00	; 0
 1b4:	50 e0       	ldi	r21, 0x00	; 0
 1b6:	dc d0       	rcall	.+440    	; 0x370 <__udivmodsi4>
 1b8:	ca 01       	movw	r24, r20
 1ba:	b9 01       	movw	r22, r18
 1bc:	a5 01       	movw	r20, r10
 1be:	94 01       	movw	r18, r8
 1c0:	d7 d0       	rcall	.+430    	; 0x370 <__udivmodsi4>
 1c2:	4b 01       	movw	r8, r22
 1c4:	5c 01       	movw	r10, r24
	int n4 = num / 1000;		//D(13)
 1c6:	c7 01       	movw	r24, r14
 1c8:	b6 01       	movw	r22, r12
 1ca:	28 ee       	ldi	r18, 0xE8	; 232
 1cc:	33 e0       	ldi	r19, 0x03	; 3
 1ce:	40 e0       	ldi	r20, 0x00	; 0
 1d0:	50 e0       	ldi	r21, 0x00	; 0
 1d2:	ce d0       	rcall	.+412    	; 0x370 <__udivmodsi4>
	
	arr[0] = digit[n1]; arr[1] = digit[n2]; arr[2] = digit[n3] + 0x80; arr[3] = digit[n4];
 1d4:	e9 81       	ldd	r30, Y+1	; 0x01
 1d6:	fa 81       	ldd	r31, Y+2	; 0x02
 1d8:	ef 5f       	subi	r30, 0xFF	; 255
 1da:	fe 4f       	sbci	r31, 0xFE	; 254
 1dc:	80 81       	ld	r24, Z
 1de:	e2 e1       	ldi	r30, 0x12	; 18
 1e0:	f1 e0       	ldi	r31, 0x01	; 1
 1e2:	80 83       	st	Z, r24
 1e4:	d2 01       	movw	r26, r4
 1e6:	af 5f       	subi	r26, 0xFF	; 255
 1e8:	be 4f       	sbci	r27, 0xFE	; 254
 1ea:	8c 91       	ld	r24, X
 1ec:	81 83       	std	Z+1, r24	; 0x01
 1ee:	d4 01       	movw	r26, r8
 1f0:	af 5f       	subi	r26, 0xFF	; 255
 1f2:	be 4f       	sbci	r27, 0xFE	; 254
 1f4:	8c 91       	ld	r24, X
 1f6:	80 58       	subi	r24, 0x80	; 128
 1f8:	82 83       	std	Z+2, r24	; 0x02
 1fa:	d9 01       	movw	r26, r18
 1fc:	af 5f       	subi	r26, 0xFF	; 255
 1fe:	be 4f       	sbci	r27, 0xFE	; 254
 200:	8c 91       	ld	r24, X
 202:	83 83       	std	Z+3, r24	; 0x03
	
	if ( num<10 ){
 204:	8a e0       	ldi	r24, 0x0A	; 10
 206:	c8 16       	cp	r12, r24
 208:	d1 04       	cpc	r13, r1
 20a:	e1 04       	cpc	r14, r1
 20c:	f1 04       	cpc	r15, r1
 20e:	28 f4       	brcc	.+10     	; 0x21a <Trans+0xc2>
		arr[3] = 0; arr[1] = 0; arr[2] = 0x80;
 210:	13 82       	std	Z+3, r1	; 0x03
 212:	11 82       	std	Z+1, r1	; 0x01
 214:	80 e8       	ldi	r24, 0x80	; 128
 216:	82 83       	std	Z+2, r24	; 0x02
 218:	15 c0       	rjmp	.+42     	; 0x244 <Trans+0xec>
	}
	else if ( num<100 ){
 21a:	84 e6       	ldi	r24, 0x64	; 100
 21c:	c8 16       	cp	r12, r24
 21e:	d1 04       	cpc	r13, r1
 220:	e1 04       	cpc	r14, r1
 222:	f1 04       	cpc	r15, r1
 224:	30 f4       	brcc	.+12     	; 0x232 <Trans+0xda>
		arr[2] = 0x80; arr[3] = 0;
 226:	e2 e1       	ldi	r30, 0x12	; 18
 228:	f1 e0       	ldi	r31, 0x01	; 1
 22a:	80 e8       	ldi	r24, 0x80	; 128
 22c:	82 83       	std	Z+2, r24	; 0x02
 22e:	13 82       	std	Z+3, r1	; 0x03
 230:	09 c0       	rjmp	.+18     	; 0x244 <Trans+0xec>
	}
	else if ( num<1000 ){
 232:	88 ee       	ldi	r24, 0xE8	; 232
 234:	c8 16       	cp	r12, r24
 236:	83 e0       	ldi	r24, 0x03	; 3
 238:	d8 06       	cpc	r13, r24
 23a:	e1 04       	cpc	r14, r1
 23c:	f1 04       	cpc	r15, r1
 23e:	10 f4       	brcc	.+4      	; 0x244 <Trans+0xec>
		arr[3] = 0;
 240:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <__data_end+0x3>
	}
	
	return arr;
}
 244:	82 e1       	ldi	r24, 0x12	; 18
 246:	91 e0       	ldi	r25, 0x01	; 1
 248:	0f 90       	pop	r0
 24a:	0f 90       	pop	r0
 24c:	0f 90       	pop	r0
 24e:	0f 90       	pop	r0
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	ff 90       	pop	r15
 256:	ef 90       	pop	r14
 258:	df 90       	pop	r13
 25a:	cf 90       	pop	r12
 25c:	bf 90       	pop	r11
 25e:	af 90       	pop	r10
 260:	9f 90       	pop	r9
 262:	8f 90       	pop	r8
 264:	7f 90       	pop	r7
 266:	6f 90       	pop	r6
 268:	5f 90       	pop	r5
 26a:	4f 90       	pop	r4
 26c:	08 95       	ret

0000026e <main>:

int main(void)
{
	
	unsigned long i, j = 0;
	DDRD = 0xFF;						//세그먼트 제어 핀 8개를 출력으로 설정
 26e:	8f ef       	ldi	r24, 0xFF	; 255
 270:	81 bb       	out	0x11, r24	; 17
	DDRC = 0x0F;						//자릿수 선택 핀 4개를 출력으로 설정
 272:	8f e0       	ldi	r24, 0x0F	; 15
 274:	84 bb       	out	0x14, r24	; 20
	DDRB &= ~0x01;						//B port의 0번째 비트는 입력용(0)으로, 나머지는 출력용(1)로 설정 (1111 1110 = NOT 0000 0001)
 276:	87 b3       	in	r24, 0x17	; 23
 278:	8e 7f       	andi	r24, 0xFE	; 254
 27a:	87 bb       	out	0x17, r24	; 23
		PORTC &= ~(1 << (position - 1));
	
		PORTD = character[number];
	}

	int mode = 0;
 27c:	c0 e0       	ldi	r28, 0x00	; 0
 27e:	d0 e0       	ldi	r29, 0x00	; 0


int main(void)
{
	
	unsigned long i, j = 0;
 280:	c1 2c       	mov	r12, r1
 282:	d1 2c       	mov	r13, r1
 284:	76 01       	movw	r14, r12
 286:	02 c0       	rjmp	.+4      	; 0x28c <main+0x1e>
				_delay_ms(2);                                                                                                                                                                                                                                          
				display_character(3, 0);
				_delay_ms(2);
				display_character(4, 0);
				_delay_ms(2);
				if(!(PINB & 0x01 == 1)) mode = 1;
 288:	c1 e0       	ldi	r28, 0x01	; 1
 28a:	d0 e0       	ldi	r29, 0x00	; 0

	//스탑워치
	while(1){
		if(mode >= 4) mode = 0;
	
		switch(mode){
 28c:	c1 30       	cpi	r28, 0x01	; 1
 28e:	d1 05       	cpc	r29, r1
 290:	a9 f1       	breq	.+106    	; 0x2fc <main+0x8e>
 292:	c2 30       	cpi	r28, 0x02	; 2
 294:	d1 05       	cpc	r29, r1
 296:	09 f4       	brne	.+2      	; 0x29a <main+0x2c>
 298:	4a c0       	rjmp	.+148    	; 0x32e <main+0xc0>
 29a:	20 97       	sbiw	r28, 0x00	; 0
 29c:	b9 f7       	brne	.-18     	; 0x28c <main+0x1e>
			case 0:	//화면이 켜지면 mode0(---- 표시 코드)
				display_character(1, 0);
 29e:	60 e0       	ldi	r22, 0x00	; 0
 2a0:	70 e0       	ldi	r23, 0x00	; 0
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	10 df       	rcall	.-480    	; 0xc8 <display_character.1765>
 2a8:	8f e3       	ldi	r24, 0x3F	; 63
 2aa:	9f e1       	ldi	r25, 0x1F	; 31
 2ac:	01 97       	sbiw	r24, 0x01	; 1
 2ae:	f1 f7       	brne	.-4      	; 0x2ac <main+0x3e>
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <main+0x44>
 2b2:	00 00       	nop
				_delay_ms(2);
				display_character(2, 0);
 2b4:	60 e0       	ldi	r22, 0x00	; 0
 2b6:	70 e0       	ldi	r23, 0x00	; 0
 2b8:	82 e0       	ldi	r24, 0x02	; 2
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	05 df       	rcall	.-502    	; 0xc8 <display_character.1765>
 2be:	8f e3       	ldi	r24, 0x3F	; 63
 2c0:	9f e1       	ldi	r25, 0x1F	; 31
 2c2:	01 97       	sbiw	r24, 0x01	; 1
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <main+0x54>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <main+0x5a>
 2c8:	00 00       	nop
				_delay_ms(2);                                                                                                                                                                                                                                          
				display_character(3, 0);
 2ca:	60 e0       	ldi	r22, 0x00	; 0
 2cc:	70 e0       	ldi	r23, 0x00	; 0
 2ce:	83 e0       	ldi	r24, 0x03	; 3
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	fa de       	rcall	.-524    	; 0xc8 <display_character.1765>
 2d4:	8f e3       	ldi	r24, 0x3F	; 63
 2d6:	9f e1       	ldi	r25, 0x1F	; 31
 2d8:	01 97       	sbiw	r24, 0x01	; 1
 2da:	f1 f7       	brne	.-4      	; 0x2d8 <main+0x6a>
 2dc:	00 c0       	rjmp	.+0      	; 0x2de <main+0x70>
 2de:	00 00       	nop
				_delay_ms(2);
				display_character(4, 0);
 2e0:	60 e0       	ldi	r22, 0x00	; 0
 2e2:	70 e0       	ldi	r23, 0x00	; 0
 2e4:	84 e0       	ldi	r24, 0x04	; 4
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	ef de       	rcall	.-546    	; 0xc8 <display_character.1765>
 2ea:	8f e3       	ldi	r24, 0x3F	; 63
 2ec:	9f e1       	ldi	r25, 0x1F	; 31
 2ee:	01 97       	sbiw	r24, 0x01	; 1
 2f0:	f1 f7       	brne	.-4      	; 0x2ee <main+0x80>
 2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <main+0x86>
 2f4:	00 00       	nop
				_delay_ms(2);
				if(!(PINB & 0x01 == 1)) mode = 1;
 2f6:	b0 9b       	sbis	0x16, 0	; 22
 2f8:	c7 cf       	rjmp	.-114    	; 0x288 <main+0x1a>
 2fa:	c8 cf       	rjmp	.-112    	; 0x28c <main+0x1e>

	//스탑워치
	while(1){
		if(mode >= 4) mode = 0;
	
		switch(mode){
 2fc:	60 e0       	ldi	r22, 0x00	; 0
 2fe:	70 e0       	ldi	r23, 0x00	; 0
 300:	cb 01       	movw	r24, r22
				if(!(PINB & 0x01 == 1)) mode = 1;
				break;
			case 1:	//버튼을 1회 누르면 스탑워치 작동 시작
				j = 0;
				while(1){
					FND_4(Trans(j++));
 302:	6b 01       	movw	r12, r22
 304:	7c 01       	movw	r14, r24
 306:	2f ef       	ldi	r18, 0xFF	; 255
 308:	c2 1a       	sub	r12, r18
 30a:	d2 0a       	sbc	r13, r18
 30c:	e2 0a       	sbc	r14, r18
 30e:	f2 0a       	sbc	r15, r18
 310:	23 df       	rcall	.-442    	; 0x158 <Trans>
 312:	0b df       	rcall	.-490    	; 0x12a <FND_4>
 314:	8f e3       	ldi	r24, 0x3F	; 63
 316:	9f e1       	ldi	r25, 0x1F	; 31
 318:	01 97       	sbiw	r24, 0x01	; 1
 31a:	f1 f7       	brne	.-4      	; 0x318 <main+0xaa>
 31c:	00 c0       	rjmp	.+0      	; 0x31e <main+0xb0>
 31e:	00 00       	nop
 320:	c7 01       	movw	r24, r14
 322:	b6 01       	movw	r22, r12
					_delay_ms(2);
					if(!(PINB & 0x01 == 1)) break; mode = 2;
 324:	b0 9b       	sbis	0x16, 0	; 22
 326:	b2 cf       	rjmp	.-156    	; 0x28c <main+0x1e>
 328:	c2 e0       	ldi	r28, 0x02	; 2
 32a:	d0 e0       	ldi	r29, 0x00	; 0
 32c:	ea cf       	rjmp	.-44     	; 0x302 <main+0x94>
 32e:	9f ef       	ldi	r25, 0xFF	; 255
 330:	21 ee       	ldi	r18, 0xE1	; 225
 332:	84 e0       	ldi	r24, 0x04	; 4
 334:	91 50       	subi	r25, 0x01	; 1
 336:	20 40       	sbci	r18, 0x00	; 0
 338:	80 40       	sbci	r24, 0x00	; 0
 33a:	e1 f7       	brne	.-8      	; 0x334 <main+0xc6>
				}
				break;
			case 2:	//버튼을 누르면 스탑워치 작동 정지
				_delay_ms(100);
				while(1){
					FND_4(Trans(j));
 33c:	00 c0       	rjmp	.+0      	; 0x33e <main+0xd0>
 33e:	00 00       	nop
 340:	c7 01       	movw	r24, r14
 342:	b6 01       	movw	r22, r12
 344:	09 df       	rcall	.-494    	; 0x158 <Trans>
 346:	f1 de       	rcall	.-542    	; 0x12a <FND_4>
 348:	8f e3       	ldi	r24, 0x3F	; 63
 34a:	9f e1       	ldi	r25, 0x1F	; 31
 34c:	01 97       	sbiw	r24, 0x01	; 1
 34e:	f1 f7       	brne	.-4      	; 0x34c <main+0xde>
 350:	00 c0       	rjmp	.+0      	; 0x352 <main+0xe4>
 352:	00 00       	nop
					_delay_ms(2);
					if(!(PINB & 0x01 == 1)) break; 
 354:	b0 99       	sbic	0x16, 0	; 22
 356:	f4 cf       	rjmp	.-24     	; 0x340 <main+0xd2>
 358:	9f ef       	ldi	r25, 0xFF	; 255
 35a:	25 ea       	ldi	r18, 0xA5	; 165
 35c:	8e e0       	ldi	r24, 0x0E	; 14
 35e:	91 50       	subi	r25, 0x01	; 1
 360:	20 40       	sbci	r18, 0x00	; 0
 362:	80 40       	sbci	r24, 0x00	; 0
 364:	e1 f7       	brne	.-8      	; 0x35e <main+0xf0>
 366:	00 c0       	rjmp	.+0      	; 0x368 <main+0xfa>
 368:	00 00       	nop
				}
				_delay_ms(300);
				mode = 0;
 36a:	c0 e0       	ldi	r28, 0x00	; 0
 36c:	d0 e0       	ldi	r29, 0x00	; 0
				break;
 36e:	8e cf       	rjmp	.-228    	; 0x28c <main+0x1e>

00000370 <__udivmodsi4>:
 370:	a1 e2       	ldi	r26, 0x21	; 33
 372:	1a 2e       	mov	r1, r26
 374:	aa 1b       	sub	r26, r26
 376:	bb 1b       	sub	r27, r27
 378:	fd 01       	movw	r30, r26
 37a:	0d c0       	rjmp	.+26     	; 0x396 <__udivmodsi4_ep>

0000037c <__udivmodsi4_loop>:
 37c:	aa 1f       	adc	r26, r26
 37e:	bb 1f       	adc	r27, r27
 380:	ee 1f       	adc	r30, r30
 382:	ff 1f       	adc	r31, r31
 384:	a2 17       	cp	r26, r18
 386:	b3 07       	cpc	r27, r19
 388:	e4 07       	cpc	r30, r20
 38a:	f5 07       	cpc	r31, r21
 38c:	20 f0       	brcs	.+8      	; 0x396 <__udivmodsi4_ep>
 38e:	a2 1b       	sub	r26, r18
 390:	b3 0b       	sbc	r27, r19
 392:	e4 0b       	sbc	r30, r20
 394:	f5 0b       	sbc	r31, r21

00000396 <__udivmodsi4_ep>:
 396:	66 1f       	adc	r22, r22
 398:	77 1f       	adc	r23, r23
 39a:	88 1f       	adc	r24, r24
 39c:	99 1f       	adc	r25, r25
 39e:	1a 94       	dec	r1
 3a0:	69 f7       	brne	.-38     	; 0x37c <__udivmodsi4_loop>
 3a2:	60 95       	com	r22
 3a4:	70 95       	com	r23
 3a6:	80 95       	com	r24
 3a8:	90 95       	com	r25
 3aa:	9b 01       	movw	r18, r22
 3ac:	ac 01       	movw	r20, r24
 3ae:	bd 01       	movw	r22, r26
 3b0:	cf 01       	movw	r24, r30
 3b2:	08 95       	ret

000003b4 <_exit>:
 3b4:	f8 94       	cli

000003b6 <__stop_program>:
 3b6:	ff cf       	rjmp	.-2      	; 0x3b6 <__stop_program>
