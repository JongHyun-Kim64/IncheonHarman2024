
Timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  0000038c  00000420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000038c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800110  00800110  00000430  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000430  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000460  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  0000049c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a95  00000000  00000000  000004ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008d5  00000000  00000000  00000f81  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003f9  00000000  00000000  00001856  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000118  00000000  00000000  00001c50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000447  00000000  00000000  00001d68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003b2  00000000  00000000  000021af  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00002561  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	49 c1       	rjmp	.+658    	; 0x2a8 <__vector_5>
  16:	00 00       	nop
  18:	6a c1       	rjmp	.+724    	; 0x2ee <__vector_6>
  1a:	00 00       	nop
  1c:	89 c1       	rjmp	.+786    	; 0x330 <__vector_7>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e8       	ldi	r30, 0x8C	; 140
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e1       	ldi	r26, 0x10	; 16
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 31       	cpi	r26, 0x19	; 25
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	c1 d0       	rcall	.+386    	; 0x246 <main>
  c4:	61 c1       	rjmp	.+706    	; 0x388 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <seg>:
char arr[5];		//세그먼트 이미지 정보를 담을 안전공간
volatile int opt = 0, set = 0, reset = 0;


void seg(int sel, uint8_t c){
	PORTC |= 0X0F;
  c8:	25 b3       	in	r18, 0x15	; 21
  ca:	2f 60       	ori	r18, 0x0F	; 15
  cc:	25 bb       	out	0x15, r18	; 21
	PORTC &= ~(1 << (3-sel));
  ce:	25 b3       	in	r18, 0x15	; 21
  d0:	43 e0       	ldi	r20, 0x03	; 3
  d2:	50 e0       	ldi	r21, 0x00	; 0
  d4:	48 1b       	sub	r20, r24
  d6:	59 0b       	sbc	r21, r25
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <seg+0x1a>
  de:	88 0f       	add	r24, r24
  e0:	99 1f       	adc	r25, r25
  e2:	4a 95       	dec	r20
  e4:	e2 f7       	brpl	.-8      	; 0xde <seg+0x16>
  e6:	80 95       	com	r24
  e8:	82 23       	and	r24, r18
  ea:	85 bb       	out	0x15, r24	; 21
	PORTD = c;	//숫자 데이터 출력
  ec:	62 bb       	out	0x12, r22	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ee:	8f e0       	ldi	r24, 0x0F	; 15
  f0:	97 e2       	ldi	r25, 0x27	; 39
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <seg+0x2a>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <seg+0x30>
  f8:	00 00       	nop
  fa:	08 95       	ret

000000fc <FND_4>:
	_delay_ms(2.5);
}


void FND_4(char *inf){	//segment Image 배열
  fc:	0f 93       	push	r16
  fe:	1f 93       	push	r17
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
 104:	8c 01       	movw	r16, r24
	for (int i = 0; i < 4; i++){
 106:	c0 e0       	ldi	r28, 0x00	; 0
 108:	d0 e0       	ldi	r29, 0x00	; 0
 10a:	07 c0       	rjmp	.+14     	; 0x11a <FND_4+0x1e>
		seg(i, *(inf+i));
 10c:	f8 01       	movw	r30, r16
 10e:	ec 0f       	add	r30, r28
 110:	fd 1f       	adc	r31, r29
 112:	60 81       	ld	r22, Z
 114:	ce 01       	movw	r24, r28
 116:	d8 df       	rcall	.-80     	; 0xc8 <seg>
	_delay_ms(2.5);
}


void FND_4(char *inf){	//segment Image 배열
	for (int i = 0; i < 4; i++){
 118:	21 96       	adiw	r28, 0x01	; 1
 11a:	c4 30       	cpi	r28, 0x04	; 4
 11c:	d1 05       	cpc	r29, r1
 11e:	b4 f3       	brlt	.-20     	; 0x10c <FND_4+0x10>
		seg(i, *(inf+i));

	}
}
 120:	df 91       	pop	r29
 122:	cf 91       	pop	r28
 124:	1f 91       	pop	r17
 126:	0f 91       	pop	r16
 128:	08 95       	ret

0000012a <Display>:

//16진수 segment image 배열
char* Display(unsigned long num){	//10진 정수를 입력받아 16진수 문자열로 변환 ex)65535 ==> 0xffff, 56506=>0xBCDA
 12a:	4f 92       	push	r4
 12c:	5f 92       	push	r5
 12e:	6f 92       	push	r6
 130:	7f 92       	push	r7
 132:	8f 92       	push	r8
 134:	9f 92       	push	r9
 136:	af 92       	push	r10
 138:	bf 92       	push	r11
 13a:	cf 92       	push	r12
 13c:	df 92       	push	r13
 13e:	ef 92       	push	r14
 140:	ff 92       	push	r15
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	cd b7       	in	r28, 0x3d	; 61
 148:	de b7       	in	r29, 0x3e	; 62
 14a:	28 97       	sbiw	r28, 0x08	; 8
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	f8 94       	cli
 150:	de bf       	out	0x3e, r29	; 62
 152:	0f be       	out	0x3f, r0	; 63
 154:	cd bf       	out	0x3d, r28	; 61
 156:	4b 01       	movw	r8, r22
 158:	5c 01       	movw	r10, r24
	int n1 = (num / 100) % 10;			//A(10): 문자가 아닌 숫자
 15a:	24 e6       	ldi	r18, 0x64	; 100
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	40 e0       	ldi	r20, 0x00	; 0
 160:	50 e0       	ldi	r21, 0x00	; 0
 162:	f0 d0       	rcall	.+480    	; 0x344 <__udivmodsi4>
 164:	0f 2e       	mov	r0, r31
 166:	fa e0       	ldi	r31, 0x0A	; 10
 168:	cf 2e       	mov	r12, r31
 16a:	d1 2c       	mov	r13, r1
 16c:	e1 2c       	mov	r14, r1
 16e:	f1 2c       	mov	r15, r1
 170:	f0 2d       	mov	r31, r0
 172:	ca 01       	movw	r24, r20
 174:	b9 01       	movw	r22, r18
 176:	a7 01       	movw	r20, r14
 178:	96 01       	movw	r18, r12
 17a:	e4 d0       	rcall	.+456    	; 0x344 <__udivmodsi4>
 17c:	69 83       	std	Y+1, r22	; 0x01
 17e:	7a 83       	std	Y+2, r23	; 0x02
 180:	8b 83       	std	Y+3, r24	; 0x03
 182:	9c 83       	std	Y+4, r25	; 0x04
	int n2 = ((num / 1000) % 10)%6;	//B(11)
 184:	c5 01       	movw	r24, r10
 186:	b4 01       	movw	r22, r8
 188:	28 ee       	ldi	r18, 0xE8	; 232
 18a:	33 e0       	ldi	r19, 0x03	; 3
 18c:	40 e0       	ldi	r20, 0x00	; 0
 18e:	50 e0       	ldi	r21, 0x00	; 0
 190:	d9 d0       	rcall	.+434    	; 0x344 <__udivmodsi4>
 192:	ca 01       	movw	r24, r20
 194:	b9 01       	movw	r22, r18
 196:	a7 01       	movw	r20, r14
 198:	96 01       	movw	r18, r12
 19a:	d4 d0       	rcall	.+424    	; 0x344 <__udivmodsi4>
 19c:	26 e0       	ldi	r18, 0x06	; 6
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	40 e0       	ldi	r20, 0x00	; 0
 1a2:	50 e0       	ldi	r21, 0x00	; 0
 1a4:	cf d0       	rcall	.+414    	; 0x344 <__udivmodsi4>
 1a6:	2b 01       	movw	r4, r22
 1a8:	3c 01       	movw	r6, r24
	int n3 = (num / 6000) % 10;	//C(12)
 1aa:	c5 01       	movw	r24, r10
 1ac:	b4 01       	movw	r22, r8
 1ae:	20 e7       	ldi	r18, 0x70	; 112
 1b0:	37 e1       	ldi	r19, 0x17	; 23
 1b2:	40 e0       	ldi	r20, 0x00	; 0
 1b4:	50 e0       	ldi	r21, 0x00	; 0
 1b6:	c6 d0       	rcall	.+396    	; 0x344 <__udivmodsi4>
 1b8:	ca 01       	movw	r24, r20
 1ba:	b9 01       	movw	r22, r18
 1bc:	a7 01       	movw	r20, r14
 1be:	96 01       	movw	r18, r12
 1c0:	c1 d0       	rcall	.+386    	; 0x344 <__udivmodsi4>
 1c2:	6d 83       	std	Y+5, r22	; 0x05
 1c4:	7e 83       	std	Y+6, r23	; 0x06
 1c6:	8f 83       	std	Y+7, r24	; 0x07
 1c8:	98 87       	std	Y+8, r25	; 0x08
	int n4 = (num / 60000) % 10;		//D(13)
 1ca:	c5 01       	movw	r24, r10
 1cc:	b4 01       	movw	r22, r8
 1ce:	20 e6       	ldi	r18, 0x60	; 96
 1d0:	3a ee       	ldi	r19, 0xEA	; 234
 1d2:	40 e0       	ldi	r20, 0x00	; 0
 1d4:	50 e0       	ldi	r21, 0x00	; 0
 1d6:	b6 d0       	rcall	.+364    	; 0x344 <__udivmodsi4>
 1d8:	ca 01       	movw	r24, r20
 1da:	b9 01       	movw	r22, r18
 1dc:	a7 01       	movw	r20, r14
 1de:	96 01       	movw	r18, r12
 1e0:	b1 d0       	rcall	.+354    	; 0x344 <__udivmodsi4>
 1e2:	e9 81       	ldd	r30, Y+1	; 0x01
	
	arr[0] = digit[n1]; arr[1] = digit[n2]; arr[2] = digit[n3] + 0x80; arr[3] = digit[n4];
 1e4:	fa 81       	ldd	r31, Y+2	; 0x02
 1e6:	e0 50       	subi	r30, 0x00	; 0
 1e8:	ff 4f       	sbci	r31, 0xFF	; 255
 1ea:	20 81       	ld	r18, Z
 1ec:	e4 e1       	ldi	r30, 0x14	; 20
 1ee:	f1 e0       	ldi	r31, 0x01	; 1
 1f0:	20 83       	st	Z, r18
 1f2:	d2 01       	movw	r26, r4
 1f4:	a0 50       	subi	r26, 0x00	; 0
 1f6:	bf 4f       	sbci	r27, 0xFF	; 255
 1f8:	2c 91       	ld	r18, X
 1fa:	21 83       	std	Z+1, r18	; 0x01
 1fc:	ad 81       	ldd	r26, Y+5	; 0x05
 1fe:	be 81       	ldd	r27, Y+6	; 0x06
 200:	a0 50       	subi	r26, 0x00	; 0
 202:	bf 4f       	sbci	r27, 0xFF	; 255
 204:	2c 91       	ld	r18, X
 206:	20 58       	subi	r18, 0x80	; 128
 208:	22 83       	std	Z+2, r18	; 0x02
 20a:	db 01       	movw	r26, r22
 20c:	a0 50       	subi	r26, 0x00	; 0
 20e:	bf 4f       	sbci	r27, 0xFF	; 255
 210:	8c 91       	ld	r24, X
 212:	83 83       	std	Z+3, r24	; 0x03
	//}
	//else if ( num<1000 ){
		//arr[3] = 0;
	//}
	//
	FND_4(arr);
 214:	cf 01       	movw	r24, r30
 216:	72 df       	rcall	.-284    	; 0xfc <FND_4>
 218:	84 e1       	ldi	r24, 0x14	; 20
	return arr;
}
 21a:	91 e0       	ldi	r25, 0x01	; 1
 21c:	28 96       	adiw	r28, 0x08	; 8
 21e:	0f b6       	in	r0, 0x3f	; 63
 220:	f8 94       	cli
 222:	de bf       	out	0x3e, r29	; 62
 224:	0f be       	out	0x3f, r0	; 63
 226:	cd bf       	out	0x3d, r28	; 61
 228:	df 91       	pop	r29
 22a:	cf 91       	pop	r28
 22c:	ff 90       	pop	r15
 22e:	ef 90       	pop	r14
 230:	df 90       	pop	r13
 232:	cf 90       	pop	r12
 234:	bf 90       	pop	r11
 236:	af 90       	pop	r10
 238:	9f 90       	pop	r9
 23a:	8f 90       	pop	r8
 23c:	7f 90       	pop	r7
 23e:	6f 90       	pop	r6
 240:	5f 90       	pop	r5
 242:	4f 90       	pop	r4
 244:	08 95       	ret

00000246 <main>:
 246:	8a b3       	in	r24, 0x1a	; 26
{
	//7-Segment 사용	: 4 Module - C type
	//	Pin assign	: PDx - Segment img, PCx - module sel
	//Interrupt 사용	: INT4~INT6 (External Interrupt)
	//	Pin assign	: PE4~PE6
	DDRA |= 0x80;	//PA의 포트7을 출력으로 사용 1000 0000
 248:	80 68       	ori	r24, 0x80	; 128
 24a:	8a bb       	out	0x1a, r24	; 26
	DDRD = 0xFF;
 24c:	8f ef       	ldi	r24, 0xFF	; 255
 24e:	81 bb       	out	0x11, r24	; 17
	DDRC = 0x0F;
 250:	8f e0       	ldi	r24, 0x0F	; 15
 252:	84 bb       	out	0x14, r24	; 20
	DDRE = 0x00;
 254:	12 b8       	out	0x02, r1	; 2
	
	//인터럽트 설정
	EIMSK = 0x70;	//0111 0000	//INT 4~INT 6 활성화
 256:	80 e7       	ldi	r24, 0x70	; 112
 258:	89 bf       	out	0x39, r24	; 57
	EICRB = 0x2a;	//4개의 B그룹(INT4~INT7)의 인터럽트 발생 시점 결정(00 10 10 10, 각 7 6 5 4에서의 INT발생 시점을 rising edge로 결정)
 25a:	8a e2       	ldi	r24, 0x2A	; 42
 25c:	8a bf       	out	0x3a, r24	; 58
	SREG |= 0x80;	//status Register - 인터럽트 허용 상태 레지스터
 25e:	8f b7       	in	r24, 0x3f	; 63
 260:	80 68       	ori	r24, 0x80	; 128
 262:	8f bf       	out	0x3f, r24	; 63
	sei();			//set interrupt
 264:	78 94       	sei
	
	int t = 0;
 266:	c0 e0       	ldi	r28, 0x00	; 0
 268:	d0 e0       	ldi	r29, 0x00	; 0
	while (1)
	{
		switch(set){
 26a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 26e:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 272:	00 97       	sbiw	r24, 0x00	; 0
 274:	21 f0       	breq	.+8      	; 0x27e <main+0x38>
 276:	01 97       	sbiw	r24, 0x01	; 1
 278:	21 f4       	brne	.+8      	; 0x282 <main+0x3c>
			case 0:	//시간 0 표시
				t = 0;
				break;
			case 1:	//stopwatch start
				t++;
 27a:	21 96       	adiw	r28, 0x01	; 1
				break;
 27c:	02 c0       	rjmp	.+4      	; 0x282 <main+0x3c>
	int t = 0;
	while (1)
	{
		switch(set){
			case 0:	//시간 0 표시
				t = 0;
 27e:	c0 e0       	ldi	r28, 0x00	; 0
 280:	d0 e0       	ldi	r29, 0x00	; 0
				break;
			case 2:	//stopwatch stop
				break;
			default:  break;
		}
		switch(opt){
 282:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <opt>
 286:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <opt+0x1>
 28a:	00 97       	sbiw	r24, 0x00	; 0
 28c:	21 f0       	breq	.+8      	; 0x296 <main+0x50>
 28e:	01 97       	sbiw	r24, 0x01	; 1
 290:	21 f4       	brne	.+8      	; 0x29a <main+0x54>
			case 0:	//reset단계
				t = 0; 
				break;
			case 1:	//stopwatch start
				t++;
 292:	21 96       	adiw	r28, 0x01	; 1
				break;
 294:	02 c0       	rjmp	.+4      	; 0x29a <main+0x54>
				break;
			default:  break;
		}
		switch(opt){
			case 0:	//reset단계
				t = 0; 
 296:	c0 e0       	ldi	r28, 0x00	; 0
 298:	d0 e0       	ldi	r29, 0x00	; 0
				break;
			case 2:	//stopwatch stop
				break;
			default:  break;
	}
	Display(t);
 29a:	be 01       	movw	r22, r28
 29c:	0d 2e       	mov	r0, r29
 29e:	00 0c       	add	r0, r0
 2a0:	88 0b       	sbc	r24, r24
 2a2:	99 0b       	sbc	r25, r25
 2a4:	42 df       	rcall	.-380    	; 0x12a <Display>
		//set이 0이면 시간 0, 1이면 1초에 10초씩 증가, state가 2가 되면 증가를 멈추고 시간 저장

		
	}
 2a6:	e1 cf       	rjmp	.-62     	; 0x26a <main+0x24>

000002a8 <__vector_5>:
}

ISR(INT4_vect){	//INT4 인터럽트 처리 루틴: sw1
 2a8:	1f 92       	push	r1
 2aa:	0f 92       	push	r0
 2ac:	0f b6       	in	r0, 0x3f	; 63
 2ae:	0f 92       	push	r0
 2b0:	11 24       	eor	r1, r1
 2b2:	8f 93       	push	r24
 2b4:	9f 93       	push	r25
	opt++;
 2b6:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <opt>
 2ba:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <opt+0x1>
 2be:	01 96       	adiw	r24, 0x01	; 1
 2c0:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <opt+0x1>
 2c4:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <opt>
	if (opt >= OPTMAX) opt = 1;
 2c8:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <opt>
 2cc:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <opt+0x1>
 2d0:	03 97       	sbiw	r24, 0x03	; 3
 2d2:	34 f0       	brlt	.+12     	; 0x2e0 <__vector_5+0x38>
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <opt+0x1>
 2dc:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <opt>
}
 2e0:	9f 91       	pop	r25
 2e2:	8f 91       	pop	r24
 2e4:	0f 90       	pop	r0
 2e6:	0f be       	out	0x3f, r0	; 63
 2e8:	0f 90       	pop	r0
 2ea:	1f 90       	pop	r1
 2ec:	18 95       	reti

000002ee <__vector_6>:

ISR(INT5_vect){	//INT5 인터럽트 처리 루틴: sw2
 2ee:	1f 92       	push	r1
 2f0:	0f 92       	push	r0
 2f2:	0f b6       	in	r0, 0x3f	; 63
 2f4:	0f 92       	push	r0
 2f6:	11 24       	eor	r1, r1
 2f8:	8f 93       	push	r24
 2fa:	9f 93       	push	r25
	set++;
 2fc:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 300:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 304:	01 96       	adiw	r24, 0x01	; 1
 306:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
 30a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
	if (set >= SETMAX) set = 0;
 30e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 312:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 316:	02 97       	sbiw	r24, 0x02	; 2
 318:	24 f0       	brlt	.+8      	; 0x322 <__vector_6+0x34>
 31a:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <__data_end+0x1>
 31e:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
}
 322:	9f 91       	pop	r25
 324:	8f 91       	pop	r24
 326:	0f 90       	pop	r0
 328:	0f be       	out	0x3f, r0	; 63
 32a:	0f 90       	pop	r0
 32c:	1f 90       	pop	r1
 32e:	18 95       	reti

00000330 <__vector_7>:

ISR(INT6_vect){	//INT6 인터럽트 처리 루틴: sw3
 330:	1f 92       	push	r1
 332:	0f 92       	push	r0
 334:	0f b6       	in	r0, 0x3f	; 63
 336:	0f 92       	push	r0
 338:	11 24       	eor	r1, r1
	
 33a:	0f 90       	pop	r0
 33c:	0f be       	out	0x3f, r0	; 63
 33e:	0f 90       	pop	r0
 340:	1f 90       	pop	r1
 342:	18 95       	reti

00000344 <__udivmodsi4>:
 344:	a1 e2       	ldi	r26, 0x21	; 33
 346:	1a 2e       	mov	r1, r26
 348:	aa 1b       	sub	r26, r26
 34a:	bb 1b       	sub	r27, r27
 34c:	fd 01       	movw	r30, r26
 34e:	0d c0       	rjmp	.+26     	; 0x36a <__udivmodsi4_ep>

00000350 <__udivmodsi4_loop>:
 350:	aa 1f       	adc	r26, r26
 352:	bb 1f       	adc	r27, r27
 354:	ee 1f       	adc	r30, r30
 356:	ff 1f       	adc	r31, r31
 358:	a2 17       	cp	r26, r18
 35a:	b3 07       	cpc	r27, r19
 35c:	e4 07       	cpc	r30, r20
 35e:	f5 07       	cpc	r31, r21
 360:	20 f0       	brcs	.+8      	; 0x36a <__udivmodsi4_ep>
 362:	a2 1b       	sub	r26, r18
 364:	b3 0b       	sbc	r27, r19
 366:	e4 0b       	sbc	r30, r20
 368:	f5 0b       	sbc	r31, r21

0000036a <__udivmodsi4_ep>:
 36a:	66 1f       	adc	r22, r22
 36c:	77 1f       	adc	r23, r23
 36e:	88 1f       	adc	r24, r24
 370:	99 1f       	adc	r25, r25
 372:	1a 94       	dec	r1
 374:	69 f7       	brne	.-38     	; 0x350 <__udivmodsi4_loop>
 376:	60 95       	com	r22
 378:	70 95       	com	r23
 37a:	80 95       	com	r24
 37c:	90 95       	com	r25
 37e:	9b 01       	movw	r18, r22
 380:	ac 01       	movw	r20, r24
 382:	bd 01       	movw	r22, r26
 384:	cf 01       	movw	r24, r30
 386:	08 95       	ret

00000388 <_exit>:
 388:	f8 94       	cli

0000038a <__stop_program>:
 38a:	ff cf       	rjmp	.-2      	; 0x38a <__stop_program>
